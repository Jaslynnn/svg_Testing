{"version":3,"file":"my-options.js","sourceRoot":"","sources":["src/my-options.ts"],"names":[],"mappings":"AAAA,iCAAiC;AACjC;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmDE;AAEF,IAAK,SAEJ;AAFD,WAAK,SAAS;IACZ,2CAAK,CAAA;IAAE,yCAAI,CAAA;IAAE,2CAAK,CAAA;AACpB,CAAC,EAFI,SAAS,KAAT,SAAS,QAEb;AAGD,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAYA,gDAAgD;QAE9C,SAAI,GAAG,OAAO,CAAC;QACf,cAAS,GAAG,MAAM,CAAA;QAClB,gFAAgF;QAChF,cAAS,GAAG,IAAI,GAAG,CAAC;YAClB,CAAC,OAAO,EAAE,SAAS,CAAC;YACpB,CAAC,MAAM,EAAE,SAAS,CAAC;YACnB,CAAC,OAAO,EAAE,SAAS,CAAC;SACrB,CAAC,CAAC;QAEH,uJAAuJ;QACvJ,qBAAgB,GAAG,IAAI,GAAG,CAAC;YACzB,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC;YAC5B,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC;YAC3B,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC;SAC7B,CAAC,CAAC;IAsDL,CAAC;IAnDU,MAAM;QACb,OAAO,IAAI,CAAC;;cAEF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC;KAChD,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;IAEH;;;;;QAKI;IACF,kBAAkB,CAAC,UAA+B;QAChD,IAAI,QAAQ,GAAG,EAAE,CAAC;QAElB,KAAK,IAAI,KAAK,IAAI,UAAU,CAAC,IAAI,EAAE,EAAE;YACnC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAA;wBACA,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;WAC/C,KAAK;gBACA,CAAC,CAAC;SACb;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IAEH,gBAAgB,CAAC,SAAiB;QAChC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QACtB;;;UAGE;QACF,OAAO;;OAEJ,CAAC;IACN,CAAC;CAEF,CAAA;AAjFiB,gBAAM,GAAG,GAAG,CAAA;;;;;;;;;GAS1B,CAAA;AAIF;IADC,QAAQ,EAAE;uCACI;AAdJ,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAkFrB;SAlFY,SAAS","sourcesContent":["/* eslint-disable prefer-const */\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\nimport {LitElement, html, css} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\n/*Summary of the Code\r\n\r\nBasic idea of the fill color thing for the separated file/ whatever Im trying to do above\r\nQuestions on line 113\r\n\r\n- Make an array for each item and its colors \r\nHairColor = new Map([\r\n    ['Black', '#000000'],\r\n    ['Grey', '#808080'],\r\n    ['Brown', '#964B00']\r\n\r\nEyeColor = new Map([\r\n    ['Black', '#000000'],\r\n    ['Grey', '#808080'],\r\n    ['Brown', '#964B00']\r\n...\r\n\r\nWhen the code runs,\r\n1  function _MakeChangeButtons creates the buttons based on the colorNames(key eg black)\r\n2  function _ChangeHairColor is activated when buttons get clicked, it gets the colorName from the function and \r\n- pulls out the hex code from the hair color map(value eg #000000)(Not done)\r\n- selects the SVG classes to be changed(Not done)\r\n- changes the SVG classes properties to the hex code provided(Not done)\r\n\r\n\r\nWhat things to be changed:\r\n\r\nChanges the color of the\r\nhair/eyebrow, \r\neyes,  \r\nmustache/beard,\r\nshirt\r\n\r\ncolors include \r\n\r\nHair/eyebrow/beard/mustache\r\nblack, grey, brown, blond\r\n\r\neyes\r\nblack, grey, brown, green, blue\r\n\r\nshirt\r\ngreen, orange, pink, purple, red, white, yellow\r\n\r\n\r\n\r\nremove\r\nhair\r\nmustache/beard\r\n\r\n\r\n*/\r\n\r\nenum HairColor {\r\n  Black, Grey, Brown\r\n}\r\n\r\n@customElement('my-options')\r\nexport class myOptions extends LitElement {\r\n  static override styles = css`\r\n  :host {\r\n      display: block;\r\n      border: solid 1px gray;\r\n      padding: 16px;\r\n      max-width: 800px;\r\n      margin: 16px;\r\n    }\r\n\r\n  `;\r\n\r\n//properties with the map of color and hex codes\r\n  @property()\r\n  name = 'World';\r\n  colorName = 'null'\r\n  // https://google.github.io/styleguide/tsguide.html consider using lowercase 'h'\r\n  HairColor = new Map([\r\n    ['Black', '#000000'],\r\n    ['Grey', '#808080'],\r\n    ['Brown', '#964B00']\r\n  ]);\r\n\r\n  //Consider using something like this to prevent any chance of errors occuring when the program gets more complex because of a typo when namaing a color\r\n  hairColorViaEnum = new Map([\r\n    [HairColor.Black, '#000000'],\r\n    [HairColor.Grey, '#808080'],\r\n    [HairColor.Brown, '#964B00']\r\n  ]);\r\n\r\n\r\n  override render() {\r\n    return html `\r\n    <div> HairColor</div>\r\n        <h1>${this._MakeChangeButtons(this.HairColor)}</h1>\r\n    `;\r\n  }\r\n  \r\n  /**\r\n   * Formats a greeting sample code\r\n   * @param name The name to say \"Hello\" to\r\n   */\r\n  sayHello(name: string): string {\r\n    return `Hello, ${name}`;\r\n  }\r\n\r\n/*\r\nQuestions\r\nIm not sure what to declare(?) -See above actually not very sure what that : means  <--- everything after the : is the Type or the Type to be returned\r\n1. _MakeChangeButtons(hairColors: Map<string, string>) : Map<string, string>{ Does not work\r\n2. @click does not work when I do not declare the thing above\r\n  */\r\n  _MakeChangeButtons(hairColors: Map<string, string>) {\r\n    let toReturn = [];\r\n\r\n    for (let color of hairColors.keys()) {\r\n      toReturn.push(html`  \r\n      <button @click=\"${() => this._ChangeHairColor(color)}\">\r\n         ${color}\r\n      </button>`);\r\n    }\r\n\r\n    return toReturn;\r\n  }\r\n  \r\n  /**\r\n   * Formats a greeting\r\n   * @param colorName The name of the color\r\n   * @param colorhex The hex of the color\r\n   */\r\n  \r\n  _ChangeHairColor(colorName: string ): string {\r\n    console.log(colorName)\r\n    /*- pulls out the hex code from the hair color map(value eg #000000)(Not done)\r\n- selects the SVG classes to be changed(Not done)\r\n- changes the SVG classes properties to the hex code provided(Not done)\r\n    */\r\n    return `\r\n   \r\n      `;\r\n  }\r\n\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'my-options': myOptions;\r\n  }\r\n}"]}