{"version":3,"file":"my-options.js","sourceRoot":"","sources":["src/my-options.ts"],"names":[],"mappings":"AAAA,iCAAiC;AACjC;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmDE;AAGF,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAYA,gDAAgD;QAE9C,cAAS,GAAG,MAAM,CAAA;IAsCpB,CAAC;IApCU,MAAM;QACb,OAAO,IAAI,CAAC;;cAEF,IAAI,CAAC,kBAAkB,EAAE;KAClC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,yBAAyB,CAAC,KAAgB;QACxC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAChE,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,qBAAqB,EAAE;YAC5D,MAAM,EAAE;gBACN,KAAK,EAAE,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC;aACnC;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,kBAAkB;QAChB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAElB,KAAK,IAAI,KAAK,IAAI,gBAAgB,CAAC,IAAI,EAAE,EAAE;YACzC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAA;wBACA,GAAG,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC;WACxD,SAAS,CAAC,KAAK,CAAC;gBACX,CAAC,CAAC;SACb;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF,CAAA;AAnDiB,gBAAM,GAAG,GAAG,CAAA;;;;;;;;;GAS1B,CAAA;AAIF;IADC,QAAQ,EAAE;4CACO;AAdP,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAoDrB;SApDY,SAAS","sourcesContent":["/* eslint-disable prefer-const */\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\nimport {LitElement, html, css} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\nimport { HairColor } from './hair-color';\r\nimport { hairColorViaEnum } from './hair-color-via-enum';\r\n\r\n/*Summary of the Code\r\n\r\nBasic idea of the fill color thing for the separated file/ whatever Im trying to do above\r\nQuestions on line 113\r\n\r\n- Make an array for each item and its colors \r\nHairColor = new Map([\r\n    ['Black', '#000000'],\r\n    ['Grey', '#808080'],\r\n    ['Brown', '#964B00']\r\n\r\nEyeColor = new Map([\r\n    ['Black', '#000000'],\r\n    ['Grey', '#808080'],\r\n    ['Brown', '#964B00']\r\n...\r\n\r\nWhen the code runs,\r\n1  function _MakeChangeButtons creates the buttons based on the colorNames(key eg black)\r\n2  function _ChangeHairColor is activated when buttons get clicked, it gets the colorName from the function and \r\n- pulls out the hex code from the hair color map(value eg #000000)(Not done)\r\n- selects the SVG classes to be changed(Not done)\r\n- changes the SVG classes properties to the hex code provided(Not done)\r\n\r\n\r\nWhat things to be changed:\r\n\r\nChanges the color of the\r\nhair/eyebrow, \r\neyes,  \r\nmustache/beard,\r\nshirt\r\n\r\ncolors include \r\n\r\nHair/eyebrow/beard/mustache\r\nblack, grey, brown, blond\r\n\r\neyes\r\nblack, grey, brown, green, blue\r\n\r\nshirt\r\ngreen, orange, pink, purple, red, white, yellow\r\n\r\n\r\n\r\nremove\r\nhair\r\nmustache/beard\r\n\r\n\r\n*/\r\n\r\n@customElement('my-options')\r\nexport class MyOptions extends LitElement {\r\n  static override styles = css`\r\n  :host {\r\n      display: block;\r\n      border: solid 1px gray;\r\n      padding: 16px;\r\n      max-width: 800px;\r\n      margin: 16px;\r\n    }\r\n\r\n  `;\r\n\r\n//properties with the map of color and hex codes\r\n  @property()\r\n  colorName = 'null'\r\n\r\n  override render() {\r\n    return html `\r\n    <div> HairColor</div>\r\n        <h1>${this._makeChangeButtons()}</h1>\r\n    `;\r\n  }\r\n  \r\n  /**\r\n   * Formats a greeting sample code\r\n   * @param name The name to say \"Hello\" to\r\n   */\r\n  sayHello(name: string): string {\r\n    return `Hello, ${name}`;\r\n  }\r\n\r\n  _onHairColorButtonClicked(color: HairColor) {\r\n    window.console.log(\"dispatiching\", hairColorViaEnum.get(color));\r\n    document.dispatchEvent(new CustomEvent(\"HAIR_COLOR_SELECTED\", {\r\n      detail: {\r\n        color: hairColorViaEnum.get(color)\r\n      }\r\n    }));\r\n  }\r\n\r\n  _makeChangeButtons() {\r\n    let toReturn = [];\r\n\r\n    for (let color of hairColorViaEnum.keys()) {\r\n      toReturn.push(html`  \r\n      <button @click=\"${() => this._onHairColorButtonClicked(color)}\">\r\n         ${HairColor[color]}\r\n      </button>`);\r\n    }\r\n\r\n    return toReturn;\r\n  }  \r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'my-options': MyOptions;\r\n  }\r\n}"]}